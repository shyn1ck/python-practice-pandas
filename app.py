import pandas as pd

# # Задача 1. Работа с DataFrame в библиотеке pandas
# 1) Создайте DataFrame размерностью 5х5 с данными о нескольких студентах
# и их оценках по разным предметам. Включите следующие столбцы: `'Имя', 'Возраст', 'Математика',
# 'Литература', 'Физика'` и выведите исходный DataFrame на экран;
# 2) Изучите ваш DataFrame: рассмотрите размерность, имеющиеся колонки,
# тип данных, базовую информацию;
# 3) Используя метод `loc`, выберите данные по одному из студентов, с последующим выводом на экран;
# 4) Используя метод `bloc`, выберите данные по первому студенту, с последующим выводом на экран.
# Затем найдите его оценку по физике;
# 5) Добавьте две колонки: `Пол` и `Город`;
# 6) С помощью метода `loc` измените оценку по математике для одного студента;
# 7) Добавьте новую строку в ваш DataFrame;
# 8) Выведите итоговый результат.


data = {
    'Имя': ['Алексей', 'Мария', 'Иван', 'Анна', 'Петр'],
    'Возраст': [20, 19, 21, 20, 22],
    'Математика': [90, 75, 88, 92, 85],
    'Литература': [80, 85, 78, 88, 90],
    'Физика': [85, 80, 82, 90, 88]
}
df = pd.DataFrame(data)
print("Исходный DataFrame:")
print(df)

print("\nРазмерность DataFrame:", df.shape)
print("Колонки:", df.columns)
print("Типы данных:\n", df.dtypes)
print("\nИнформация о DataFrame:")
print(df.info())

print("\nДанные по студенту 'Мария':")
print(df.loc[df['Имя'] == 'Мария'])

print("\nДанные по первому студенту:")
print(df.iloc[0])
print("\nОценка по физике у первого студента:", df.iloc[0]['Физика'])

df['Пол'] = ['М', 'Ж', 'М', 'Ж', 'М']
df['Город'] = ['Москва', 'Санкт-Петербург', 'Казань', 'Новосибирск', 'Екатеринбург']
print("\nDataFrame с новыми колонками Пол и Город:")
print(df)

df.loc[df['Имя'] == 'Иван', 'Математика'] = 95
print("\nDataFrame после изменения оценки по математике для студента Иван:")
print(df)

new_student = pd.Series(
    {'Имя': 'Ольга', 'Возраст': 23, 'Математика': 89, 'Литература': 91, 'Физика': 87, 'Пол': 'Ж', 'Город': 'Самара'})
df = df.append(new_student, ignore_index=True)

print("\nИтоговый DataFrame:")
print(df)

# # Задача 2. Обработка доходов сотрудников
# 1) Создайте один DataFrame с доходами сотрудников за 3 месяца:
#
#     - Сотрудник 1: 5000, 5500, 6000
#     - Сотрудник 2: 6000, 6500, 7000
#     - Сотрудник 3: 4500, 4800, 5100
#     - Сотрудник 4: 7000, 7500, 8000
#     - Сотрудник 5: 5500, 5800, 6100
#
# 2) Преобразуйте Series в DataFrame, где столбцы будут представлять месяцы (Январь, Февраль, Март);
# 3) Создайте новый столбец `Сумма` и `Средняя`, который будет содержать сумму доходов сотрудника за 3 месяца;
# 4) Выведите информацию о сотруднике с наибольшей суммой дохода за 3 месяца.


data = {
    'Сотрудник': ['Сотрудник 1', 'Сотрудник 2', 'Сотрудник 3', 'Сотрудник 4', 'Сотрудник 5'],
    'Январь': [5000, 6000, 4500, 7000, 5500],
    'Февраль': [5500, 6500, 4800, 7500, 5800],
    'Март': [6000, 7000, 5100, 8000, 6100]
}
df_income = pd.DataFrame(data)
df_income['Сумма'] = df_income[['Январь', 'Февраль', 'Март']].sum(axis=1)
df_income['Средняя'] = df_income[['Январь', 'Февраль', 'Март']].mean(axis=1)

highest_income_employee = df_income.loc[df_income['Сумма'].idxmax()]
print("\nСотрудник с наибольшей суммой дохода за 3 месяца:")
print(highest_income_employee)

# Задача 3. Создание проверок для выявления нехарактерных кейсов.
# 1) Создать `DataFrame` 10x10 c ФИО учеников и их оценок по дисциплинам. В данном `DataFrame` должны присутствовать дубликаты и нулевые значения `(np.nan)`.
# 2) Выведите краткую информацию DataFrame: кол-во строк и колонок, название колонок, краткая сводка по таблице + типы данных;
# 3) Выведите кросс-чек (проверку), которая позволит вам определить:
#     - Дубликаты (вывод ошибки и самих дублирующихся строк);
#     - Нулевые значение (вывод ошибки и самих нулевых строк);
#     - Проверку на пустоту вашего `DataFrame` (ошибка).

import pandas as pd
import numpy as np

data = {
    'ФИО': ['Иванов Иван', 'Петров Петр', 'Сидоров Сидор', 'Иванов Иван',
            'Петров Петр', 'Сидоров Сидор', 'Кузнецов Кузьма', 'Петров Петр',
            'Сидоров Сидор', 'Иванов Иван'],
    'Математика': [5, 4, 3, 5, np.nan, 4, 3, 5, np.nan, 2],
    'Физика': [4, 5, np.nan, 4, 3, 5, 4, np.nan, 2, 5],
    'Химия': [3, 3, 4, 2, 5, np.nan, 4, 5, 4, 3],
    'Литература': [4, 5, 4, 3, np.nan, 2, 4, 3, 5, 5],
    'История': [5, np.nan, 4, 4, 5, 3, 4, 5, 5, 3],
    'География': [np.nan, 4, 3, 5, 4, 2, 5, 5, 4, 4],
    'Иностранный язык': [5, 3, 4, 5, 5, np.nan, 3, 4, 5, 4],
    'Физическая культура': [4, 5, np.nan, 3, 2, 4, 3, 5, 4, 5],
    'Музыка': [3, 4, 5, 5, 4, 5, 3, 2, 5, 3]
}

df_students = pd.DataFrame(data)

print("Краткая информация о DataFrame:")
print(df_students.info())

duplicates = df_students[df_students.duplicated(keep=False)]
if not duplicates.empty:
    print("\nОшибка: Найдены дубликаты:")
    print(duplicates)
else:
    print("\nДубликатов не найдено.")

null_values = df_students[df_students.isnull().any(axis=1)]
if not null_values.empty:
    print("\nОшибка: Найдены строки с нулевыми значениями:")
    print(null_values)
else:
    print("\nНулевых значений не найдено.")

if df_students.empty:
    print("\nОшибка: DataFrame пуст.")
else:
    print("\nDataFrame не пуст.")
